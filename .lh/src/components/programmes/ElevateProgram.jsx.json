{
    "sourceFile": "src/components/programmes/ElevateProgram.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747151190429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747151190429,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\n\nconst ElevateProgramme = () => {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(\"/data.json\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch data.json\");\n        }\n        return response.json();\n      })\n      .then((jsonData) => {\n        console.log(\"Fetched data:\", jsonData);\n        setData(jsonData.sections.programmes || []);\n      })\n      .catch((err) => {\n        console.error(\"Fetch error:\", err);\n        setError(err.message);\n      });\n  }, []);\n\n  if (error) {\n    return <p className=\"text-red-500 text-center py-12\">Error: {error}</p>;\n  }\n\n  return (\n    <div className=\"bg-black py-16\">\n      {data.length > 0 ? (\n        data.map((item, index) => {\n          const isImageLeft = index % 2 === 0;\n\n          return (\n            <div\n              key={item.id || index}\n              className={`flex flex-col md:flex-row items-center justify-between gap-10 px-6 md:px-12 py-12 ${\n                isImageLeft ? \"\" : \"md:flex-row-reverse\"\n              }`}\n            >\n              <div\n                className={`relative w-full md:w-1/2 h-[400px] transform transition-transform duration-500 ${\n                  isImageLeft ? \"-rotate-3\" : \"rotate-3\"\n                } hover:rotate-0`}\n              >\n                <Image\n                  src={item.imageUrl}\n                  alt={`${item.heading} image`}\n                  fill\n                  objectFit=\"cover\"\n                  className=\"rounded-xl shadow-lg\"\n                />\n              </div>\n              <div className=\"w-full md:w-1/2 space-y-6\">\n                <h2 className=\"text-3xl md:text-5xl font-bold text-white flex items-center\">\n                  {isImageLeft ? (\n                    <>\n                      <span className=\"text-green-500 ml-4 text-4xl\">←</span>\n                      {item.heading}\n                    </>\n                  ) : (\n                    <>\n                      {item.heading}\n                      <span className=\"text-green-500 mr-4 text-4xl\">→</span>\n                    </>\n                  )}\n                </h2>\n                <p className=\"text-gray-300 text-lg leading-relaxed\">{item.paragraph}</p>\n                <Link\n                  href={`/programs/${item.id}`} // Updated to match the programs route\n                  className=\"text-green-500 font-semibold inline-block transition hover:underline\"\n                >\n                  {item.linkText}\n                </Link>\n              </div>\n            </div>\n          );\n        })\n      ) : (\n        <p className=\"text-white text-center py-12\">Loading programmes...</p>\n      )}\n    </div>\n  );\n};\n\nexport default ElevateProgramme;"
        }
    ]
}