{
    "sourceFile": "src/components/global/Background/WavyBackground.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1747076817878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747076873993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,15 @@\n-// WavyBackground.tsx\n-'use client';\n+// WavyBackground.jsx\n import React from 'react';\n \n-interface WavyBackgroundProps {\n-  height?: number;        // px\n-  lines?: number;         // how many curves to draw\n-  amplitude?: number;     // how “tall” each wave is\n-  gradientFrom?: string;  // top color\n-  gradientTo?: string;    // bottom color\n-}\n-\n-const WavyBackground: React.FC<WavyBackgroundProps> = ({\n+const WavyBackground = ({\n   height = 400,\n   lines = 30,\n   amplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n }) => {\n-  // Generate an array of Y‐positions for each path\n+  // Generate Y‐positions for each wave line\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n   );\n \n@@ -29,38 +20,30 @@\n         viewBox={`0 0 100 ${height}`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n-        {/* 1) Blue gradient background */}\n+        {/* Gradient background */}\n         <defs>\n           <linearGradient id=\"bgGrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n             <stop offset=\"0%\" stopColor={gradientFrom} />\n             <stop offset=\"100%\" stopColor={gradientTo} />\n           </linearGradient>\n         </defs>\n         <rect width=\"100%\" height=\"100%\" fill=\"url(#bgGrad)\" />\n \n-        {/* 2) Wavy lines */}\n+        {/* Wavy lines */}\n         <g stroke=\"black\" strokeWidth=\"0.5\" fill=\"none\">\n           {yPositions.map((y, idx) => {\n-            // Build a smooth sine‐like wave across the width\n-            const wavePath = Array.from({ length: 6 }, (_, segment) => {\n+            // Build a 6-segment Bézier “sine” wave path\n+            const d = Array.from({ length: 6 }, (_, segment) => {\n               const x0 = (segment * 100) / 5;\n               const x1 = ((segment + 1) * 100) / 5;\n-              const cpX = x0 + (x1 - x0) / 2;\n-              // Alternate control‐point offsets up and down\n-              const cpY =\n-                y +\n-                (segment % 2 === 0 ? amplitude : -amplitude);\n-              return `C ${cpX} ${cpY}, ${cpX} ${cpY}, ${x1} ${y}`;\n+              const cpX = (x0 + x1) / 2;\n+              const cpY = y + (segment % 2 === 0 ? amplitude : -amplitude);\n+              return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x1} ${y}`;\n             }).join(' ');\n \n-            return (\n-              <path\n-                key={idx}\n-                d={`M 0 ${y} ${wavePath}`}\n-              />\n-            );\n+            return <path key={idx} d={`M0 ${y} ${d}`} />;\n           })}\n         </g>\n       </svg>\n     </div>\n"
                },
                {
                    "date": 1747076988479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,53 @@\n-// WavyBackground.jsx\n+// WavyBackgroundVertical.jsx\n import React from 'react';\n \n-const WavyBackground = ({\n-  height = 400,\n-  lines = 30,\n-  amplitude = 20,\n+const WavyBackgroundVertical = ({\n+  width = 400,            // now this controls how “tall” the waves run\n+  lines = 30,             // number of wave lines\n+  amplitude = 20,         // how far each wave bulges out\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n }) => {\n-  // Generate Y‐positions for each wave line\n-  const yPositions = Array.from({ length: lines }, (_, i) =>\n-    (i * height) / (lines - 1)\n+  // Generate X‐positions for each wave line\n+  const xPositions = Array.from({ length: lines }, (_, i) =>\n+    (i * width) / (lines - 1)\n   );\n \n   return (\n-    <div className=\"relative w-full overflow-hidden\" style={{ height }}>\n+    <div className=\"relative h-full w-full overflow-hidden\" style={{ width }}>\n       <svg\n         className=\"absolute inset-0 w-full h-full\"\n-        viewBox={`0 0 100 ${height}`}\n+        viewBox={`0 0 ${width} 100`}         // invert the viewBox\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n-        {/* Gradient background */}\n+        {/* Gradient “sideways” */}\n         <defs>\n-          <linearGradient id=\"bgGrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n+          <linearGradient id=\"sideGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n             <stop offset=\"0%\" stopColor={gradientFrom} />\n             <stop offset=\"100%\" stopColor={gradientTo} />\n           </linearGradient>\n         </defs>\n-        <rect width=\"100%\" height=\"100%\" fill=\"url(#bgGrad)\" />\n+        <rect width=\"100%\" height=\"100%\" fill=\"url(#sideGrad)\" />\n \n-        {/* Wavy lines */}\n+        {/* Vertical wavy lines */}\n         <g stroke=\"black\" strokeWidth=\"0.5\" fill=\"none\">\n-          {yPositions.map((y, idx) => {\n-            // Build a 6-segment Bézier “sine” wave path\n+          {xPositions.map((x, idx) => {\n+            // Build a 6-segment vertical sine-like path\n             const d = Array.from({ length: 6 }, (_, segment) => {\n-              const x0 = (segment * 100) / 5;\n-              const x1 = ((segment + 1) * 100) / 5;\n-              const cpX = (x0 + x1) / 2;\n-              const cpY = y + (segment % 2 === 0 ? amplitude : -amplitude);\n-              return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x1} ${y}`;\n+              const y0 = (segment * 100) / 5;\n+              const y1 = ((segment + 1) * 100) / 5;\n+              const cpY = (y0 + y1) / 2;\n+              const cpX = x + (segment % 2 === 0 ? amplitude : -amplitude);\n+              return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x} ${y1}`;\n             }).join(' ');\n \n-            return <path key={idx} d={`M0 ${y} ${d}`} />;\n+            return <path key={idx} d={`M${x} 0 ${d}`} />;\n           })}\n         </g>\n       </svg>\n     </div>\n   );\n };\n \n-export default WavyBackground;\n+export default WavyBackgroundVertical;\n"
                },
                {
                    "date": 1747077124680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,42 @@\n-// WavyBackgroundVertical.jsx\n-import React from 'react';\n+// components/global/Background/WavyBackgroundVertical.jsx\n+import React from \"react\";\n \n const WavyBackgroundVertical = ({\n-  width = 400,            // now this controls how “tall” the waves run\n-  lines = 30,             // number of wave lines\n-  amplitude = 20,         // how far each wave bulges out\n-  gradientFrom = '#334d6e',\n-  gradientTo = '#7fb1d2',\n+  height = 400,      // total vertical span\n+  lines = 30,\n+  amplitude = 20,\n+  gradientFrom = \"#334d6e\",\n+  gradientTo = \"#7fb1d2\",\n }) => {\n-  // Generate X‐positions for each wave line\n   const xPositions = Array.from({ length: lines }, (_, i) =>\n-    (i * width) / (lines - 1)\n+    (i * height) / (lines - 1)\n   );\n \n   return (\n-    <div className=\"relative h-full w-full overflow-hidden\" style={{ width }}>\n+    <div className=\"relative h-full w-full overflow-hidden\" style={{ height }}>\n       <svg\n         className=\"absolute inset-0 w-full h-full\"\n-        viewBox={`0 0 ${width} 100`}         // invert the viewBox\n+        viewBox={`0 0 ${height} 100`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n-        {/* Gradient “sideways” */}\n         <defs>\n           <linearGradient id=\"sideGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n             <stop offset=\"0%\" stopColor={gradientFrom} />\n             <stop offset=\"100%\" stopColor={gradientTo} />\n           </linearGradient>\n         </defs>\n         <rect width=\"100%\" height=\"100%\" fill=\"url(#sideGrad)\" />\n-\n-        {/* Vertical wavy lines */}\n         <g stroke=\"black\" strokeWidth=\"0.5\" fill=\"none\">\n           {xPositions.map((x, idx) => {\n-            // Build a 6-segment vertical sine-like path\n-            const d = Array.from({ length: 6 }, (_, segment) => {\n-              const y0 = (segment * 100) / 5;\n-              const y1 = ((segment + 1) * 100) / 5;\n+            const d = Array.from({ length: 6 }, (_, seg) => {\n+              const y0 = (seg * 100) / 5;\n+              const y1 = ((seg + 1) * 100) / 5;\n               const cpY = (y0 + y1) / 2;\n-              const cpX = x + (segment % 2 === 0 ? amplitude : -amplitude);\n+              const cpX = x + (seg % 2 === 0 ? amplitude : -amplitude);\n               return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x} ${y1}`;\n-            }).join(' ');\n-\n+            }).join(\" \");\n             return <path key={idx} d={`M${x} 0 ${d}`} />;\n           })}\n         </g>\n       </svg>\n"
                },
                {
                    "date": 1747077181090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,66 @@\n-// components/global/Background/WavyBackgroundVertical.jsx\n-import React from \"react\";\n+// components/WavyBackground.jsx\n+import React from 'react';\n \n-const WavyBackgroundVertical = ({\n-  height = 400,      // total vertical span\n+const WavyBackground = ({\n+  height = 400,\n   lines = 30,\n-  amplitude = 20,\n-  gradientFrom = \"#334d6e\",\n-  gradientTo = \"#7fb1d2\",\n+  maxAmplitude = 20,\n+  gradientFrom = '#334d6e',\n+  gradientTo = '#7fb1d2',\n+  borderRadius = 32,   // px for bottom corners\n }) => {\n-  const xPositions = Array.from({ length: lines }, (_, i) =>\n+  // Y-positions of each line\n+  const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n   );\n \n   return (\n-    <div className=\"relative h-full w-full overflow-hidden\" style={{ height }}>\n+    <div\n+      className=\"relative w-full overflow-hidden bg-black\" \n+      style={{\n+        height,\n+        borderBottomLeftRadius: `${borderRadius}px`,\n+        borderBottomRightRadius: `${borderRadius}px`,\n+      }}\n+    >\n       <svg\n         className=\"absolute inset-0 w-full h-full\"\n-        viewBox={`0 0 ${height} 100`}\n+        viewBox={`0 0 100 ${height}`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n+        {/* gradient fill */}\n         <defs>\n-          <linearGradient id=\"sideGrad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n+          <linearGradient id=\"bgGrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n             <stop offset=\"0%\" stopColor={gradientFrom} />\n             <stop offset=\"100%\" stopColor={gradientTo} />\n           </linearGradient>\n         </defs>\n-        <rect width=\"100%\" height=\"100%\" fill=\"url(#sideGrad)\" />\n-        <g stroke=\"black\" strokeWidth=\"0.5\" fill=\"none\">\n-          {xPositions.map((x, idx) => {\n+        <rect width=\"100%\" height=\"100%\" fill=\"url(#bgGrad)\" />\n+\n+        {/* wavy lines */}\n+        <g stroke=\"black\" strokeWidth=\"0.7\" fill=\"none\">\n+          {yPositions.map((y, idx) => {\n+            // amplitude scales by a sine curve so it's small at y=0, max at middle, back to small at y=height\n+            const norm = y / height;                            \n+            const amplitude = Math.sin(Math.PI * norm) * maxAmplitude;\n+\n+            // build 6 segments across the width\n             const d = Array.from({ length: 6 }, (_, seg) => {\n-              const y0 = (seg * 100) / 5;\n-              const y1 = ((seg + 1) * 100) / 5;\n-              const cpY = (y0 + y1) / 2;\n-              const cpX = x + (seg % 2 === 0 ? amplitude : -amplitude);\n-              return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x} ${y1}`;\n-            }).join(\" \");\n-            return <path key={idx} d={`M${x} 0 ${d}`} />;\n+              const x0 = (seg * 100) / 5;\n+              const x1 = ((seg + 1) * 100) / 5;\n+              const cpX = (x0 + x1) / 2;\n+              // alternate up/down by our dynamic amplitude\n+              const cpY = y + (seg % 2 === 0 ? amplitude : -amplitude);\n+              return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x1} ${y}`;\n+            }).join(' ');\n+\n+            return <path key={idx} d={`M0 ${y} ${d}`} />;\n           })}\n         </g>\n       </svg>\n     </div>\n   );\n };\n \n-export default WavyBackgroundVertical;\n+export default WavyBackground;\n"
                },
                {
                    "date": 1747084045644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   lines = 30,\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-  borderRadius = 32,   // px for bottom corners\n+  borderRadius = 32,   \n }) => {\n   // Y-positions of each line\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n"
                },
                {
                    "date": 1747084186075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// components/WavyBackground.jsx\n+'use client';\n import React from 'react';\n \n const WavyBackground = ({\n   height = 400,\n@@ -8,59 +8,51 @@\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n   borderRadius = 32,   \n }) => {\n-  // Y-positions of each line\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n   );\n \n   return (\n     <div\n-      className=\"relative w-full overflow-hidden bg-black\" \n+      className=\"absolute inset-0 w-full overflow-hidden\"\n       style={{\n         height,\n         borderBottomLeftRadius: `${borderRadius}px`,\n         borderBottomRightRadius: `${borderRadius}px`,\n+        zIndex: -1\n       }}\n     >\n       <svg\n-        className=\"absolute inset-0 w-full h-full\"\n+        className=\"w-full h-full\"\n         viewBox={`0 0 100 ${height}`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n-        {/* gradient fill */}\n         <defs>\n           <linearGradient id=\"bgGrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n             <stop offset=\"0%\" stopColor={gradientFrom} />\n             <stop offset=\"100%\" stopColor={gradientTo} />\n           </linearGradient>\n         </defs>\n         <rect width=\"100%\" height=\"100%\" fill=\"url(#bgGrad)\" />\n-\n-        {/* wavy lines */}\n         <g stroke=\"black\" strokeWidth=\"0.7\" fill=\"none\">\n           {yPositions.map((y, idx) => {\n-            // amplitude scales by a sine curve so it's small at y=0, max at middle, back to small at y=height\n-            const norm = y / height;                            \n+            const norm = y / height;\n             const amplitude = Math.sin(Math.PI * norm) * maxAmplitude;\n-\n-            // build 6 segments across the width\n             const d = Array.from({ length: 6 }, (_, seg) => {\n               const x0 = (seg * 100) / 5;\n               const x1 = ((seg + 1) * 100) / 5;\n               const cpX = (x0 + x1) / 2;\n-              // alternate up/down by our dynamic amplitude\n               const cpY = y + (seg % 2 === 0 ? amplitude : -amplitude);\n               return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x1} ${y}`;\n             }).join(' ');\n-\n             return <path key={idx} d={`M0 ${y} ${d}`} />;\n           })}\n         </g>\n       </svg>\n     </div>\n   );\n };\n \n-export default WavyBackground;\n+export default WavyBackground;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747084238933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   );\n \n   return (\n     <div\n-      className=\"absolute inset-0 w-full overflow-hidden\"\n+      className=\"absolute inset-0 w-full overflow-hidden px-20\"\n       style={{\n         height,\n         borderBottomLeftRadius: `${borderRadius}px`,\n         borderBottomRightRadius: `${borderRadius}px`,\n"
                },
                {
                    "date": 1747084250032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   );\n \n   return (\n     <div\n-      className=\"absolute inset-0 w-full overflow-hidden px-20\"\n+      className=\"absolute inset-0 w-full overflow-hidden px-12 rounded-4xl\"\n       style={{\n         height,\n         borderBottomLeftRadius: `${borderRadius}px`,\n         borderBottomRightRadius: `${borderRadius}px`,\n"
                },
                {
                    "date": 1747084279997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   );\n \n   return (\n     <div\n-      className=\"absolute inset-0 w-full overflow-hidden px-12 rounded-4xl\"\n+      className=\"absolute inset-0 w-full overflow-hidden px-10 rounded-4xl\"\n       style={{\n         height,\n         borderBottomLeftRadius: `${borderRadius}px`,\n         borderBottomRightRadius: `${borderRadius}px`,\n"
                },
                {
                    "date": 1747084330094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   );\n \n   return (\n     <div\n-      className=\"absolute inset-0 w-full overflow-hidden px-10 rounded-4xl\"\n+      className=\"absolute inset-0 w-full overflow-hidden px-14 rounded-3xl\"\n       style={{\n         height,\n         borderBottomLeftRadius: `${borderRadius}px`,\n         borderBottomRightRadius: `${borderRadius}px`,\n"
                },
                {
                    "date": 1747084401836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+/* src/components/WavyBackground.jsx */\n 'use client';\n import React from 'react';\n \n const WavyBackground = ({\n@@ -14,13 +15,12 @@\n   );\n \n   return (\n     <div\n-      className=\"absolute inset-0 w-full overflow-hidden px-14 rounded-3xl\"\n+      className=\"absolute inset-0 w-full overflow-hidden px-14\"\n       style={{\n         height,\n-        borderBottomLeftRadius: `${borderRadius}px`,\n-        borderBottomRightRadius: `${borderRadius}px`,\n+        borderRadius: `${borderRadius}px`,\n         zIndex: -1\n       }}\n     >\n       <svg\n@@ -54,5 +54,5 @@\n     </div>\n   );\n };\n \n-export default WavyBackground;\n\\ No newline at end of file\n+export default WavyBackground;\n"
                },
                {
                    "date": 1747084593725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-/* src/components/WavyBackground.jsx */\n+// src/components/WavyBackground.jsx\n 'use client';\n import React from 'react';\n \n const WavyBackground = ({\n@@ -7,22 +7,18 @@\n   lines = 30,\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-  borderRadius = 32,   \n+  borderRadius = 32,\n }) => {\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n   );\n \n   return (\n     <div\n-      className=\"absolute inset-0 w-full overflow-hidden px-14\"\n-      style={{\n-        height,\n-        borderRadius: `${borderRadius}px`,\n-        zIndex: -1\n-      }}\n+      className={`absolute inset-0 w-full overflow-hidden px-14 rounded-[${borderRadius}px]`}\n+      style={{ height, zIndex: -1 }}\n     >\n       <svg\n         className=\"w-full h-full\"\n         viewBox={`0 0 100 ${height}`}\n"
                },
                {
                    "date": 1747084611320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   lines = 30,\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-  borderRadius = 32,\n+  borderRadius = 320,\n }) => {\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n   );\n"
                },
                {
                    "date": 1747084676748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,17 +7,18 @@\n   lines = 30,\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-  borderRadius = 320,\n+  // you can still control via prop if you like, but we'll map it to a Tailwind class:\n+  borderRadiusClass = 'rounded-3xl',\n }) => {\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n   );\n \n   return (\n     <div\n-      className={`absolute inset-0 w-full overflow-hidden px-14 rounded-[${borderRadius}px]`}\n+      className={`absolute inset-0 w-full overflow-hidden px-14 ${borderRadiusClass}`}\n       style={{ height, zIndex: -1 }}\n     >\n       <svg\n         className=\"w-full h-full\"\n"
                },
                {
                    "date": 1747084688573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   );\n \n   return (\n     <div\n-      className={`absolute inset-0 w-full overflow-hidden px-14 ${borderRadiusClass}`}\n+      className={`absolute inset-0 w-full overflow-hidden px-96 ${borderRadiusClass}`}\n       style={{ height, zIndex: -1 }}\n     >\n       <svg\n         className=\"w-full h-full\"\n"
                },
                {
                    "date": 1747084698444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,18 +7,18 @@\n   lines = 30,\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-  // you can still control via prop if you like, but we'll map it to a Tailwind class:\n+\n   borderRadiusClass = 'rounded-3xl',\n }) => {\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n   );\n \n   return (\n     <div\n-      className={`absolute inset-0 w-full overflow-hidden px-96 ${borderRadiusClass}`}\n+      className={`absolute inset-0 w-full overflow-hidden px-14 ${borderRadiusClass}`}\n       style={{ height, zIndex: -1 }}\n     >\n       <svg\n         className=\"w-full h-full\"\n"
                },
                {
                    "date": 1747084784662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       className={`absolute inset-0 w-full overflow-hidden px-14 ${borderRadiusClass}`}\n       style={{ height, zIndex: -1 }}\n     >\n       <svg\n-        className=\"w-full h-full\"\n+        className=\"w-full h-full bg-amber-500\"\n         viewBox={`0 0 100 ${height}`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n"
                },
                {
                    "date": 1747084790597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       className={`absolute inset-0 w-full overflow-hidden px-14 ${borderRadiusClass}`}\n       style={{ height, zIndex: -1 }}\n     >\n       <svg\n-        className=\"w-full h-full bg-amber-500\"\n+        className=\"w-full h-full \"\n         viewBox={`0 0 100 ${height}`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n"
                },
                {
                    "date": 1747084834874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   lines = 30,\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-\n+  // this must match a real Tailwind class:\n   borderRadiusClass = 'rounded-3xl',\n }) => {\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n@@ -19,35 +19,16 @@\n     <div\n       className={`absolute inset-0 w-full overflow-hidden px-14 ${borderRadiusClass}`}\n       style={{ height, zIndex: -1 }}\n     >\n+      {/* SVG will be clipped to the rounded corners */}\n       <svg\n-        className=\"w-full h-full \"\n+        className=\"w-full h-full\"\n         viewBox={`0 0 100 ${height}`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n-        <defs>\n-          <linearGradient id=\"bgGrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n-            <stop offset=\"0%\" stopColor={gradientFrom} />\n-            <stop offset=\"100%\" stopColor={gradientTo} />\n-          </linearGradient>\n-        </defs>\n-        <rect width=\"100%\" height=\"100%\" fill=\"url(#bgGrad)\" />\n-        <g stroke=\"black\" strokeWidth=\"0.7\" fill=\"none\">\n-          {yPositions.map((y, idx) => {\n-            const norm = y / height;\n-            const amplitude = Math.sin(Math.PI * norm) * maxAmplitude;\n-            const d = Array.from({ length: 6 }, (_, seg) => {\n-              const x0 = (seg * 100) / 5;\n-              const x1 = ((seg + 1) * 100) / 5;\n-              const cpX = (x0 + x1) / 2;\n-              const cpY = y + (seg % 2 === 0 ? amplitude : -amplitude);\n-              return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x1} ${y}`;\n-            }).join(' ');\n-            return <path key={idx} d={`M0 ${y} ${d}`} />;\n-          })}\n-        </g>\n+        …same content…\n       </svg>\n     </div>\n   );\n };\n"
                },
                {
                    "date": 1747084856801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   lines = 30,\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-  // this must match a real Tailwind class:\n+\n   borderRadiusClass = 'rounded-3xl',\n }) => {\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n@@ -19,16 +19,35 @@\n     <div\n       className={`absolute inset-0 w-full overflow-hidden px-14 ${borderRadiusClass}`}\n       style={{ height, zIndex: -1 }}\n     >\n-      {/* SVG will be clipped to the rounded corners */}\n       <svg\n-        className=\"w-full h-full\"\n+        className=\"w-full h-full \"\n         viewBox={`0 0 100 ${height}`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n-        …same content…\n+        <defs>\n+          <linearGradient id=\"bgGrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n+            <stop offset=\"0%\" stopColor={gradientFrom} />\n+            <stop offset=\"100%\" stopColor={gradientTo} />\n+          </linearGradient>\n+        </defs>\n+        <rect width=\"100%\" height=\"100%\" fill=\"url(#bgGrad)\" />\n+        <g stroke=\"black\" strokeWidth=\"0.7\" fill=\"none\">\n+          {yPositions.map((y, idx) => {\n+            const norm = y / height;\n+            const amplitude = Math.sin(Math.PI * norm) * maxAmplitude;\n+            const d = Array.from({ length: 6 }, (_, seg) => {\n+              const x0 = (seg * 100) / 5;\n+              const x1 = ((seg + 1) * 100) / 5;\n+              const cpX = (x0 + x1) / 2;\n+              const cpY = y + (seg % 2 === 0 ? amplitude : -amplitude);\n+              return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x1} ${y}`;\n+            }).join(' ');\n+            return <path key={idx} d={`M0 ${y} ${d}`} />;\n+          })}\n+        </g>\n       </svg>\n     </div>\n   );\n };\n"
                },
                {
                    "date": 1747084901323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n // src/components/WavyBackground.jsx\n 'use client';\n import React from 'react';\n \n+\n const WavyBackground = ({\n   height = 400,\n   lines = 30,\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-\n+  // this must match a real Tailwind class:\n   borderRadiusClass = 'rounded-3xl',\n }) => {\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n"
                },
                {
                    "date": 1747085011555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,28 @@\n-// src/components/WavyBackground.jsx\n 'use client';\n import React from 'react';\n \n-\n const WavyBackground = ({\n   height = 400,\n-  lines = 30,\n+  lines = 20, // Reduced for performance\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-  // this must match a real Tailwind class:\n+  strokeColor = 'none', // New prop\n+  strokeWidth = 0.7, // New prop\n   borderRadiusClass = 'rounded-3xl',\n }) => {\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n   );\n \n   return (\n     <div\n-      className={`absolute inset-0 w-full overflow-hidden px-14 ${borderRadiusClass}`}\n+      className={`absolute inset-0 w-full overflow-hidden px-4 sm:px-8 lg:px-14 ${borderRadiusClass}`}\n       style={{ height, zIndex: -1 }}\n     >\n       <svg\n-        className=\"w-full h-full \"\n+        className=\"w-full h-full\"\n         viewBox={`0 0 100 ${height}`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n@@ -33,15 +32,16 @@\n             <stop offset=\"100%\" stopColor={gradientTo} />\n           </linearGradient>\n         </defs>\n         <rect width=\"100%\" height=\"100%\" fill=\"url(#bgGrad)\" />\n-        <g stroke=\"black\" strokeWidth=\"0.7\" fill=\"none\">\n+        <g stroke={strokeColor} strokeWidth={strokeWidth} fill=\"none\">\n           {yPositions.map((y, idx) => {\n             const norm = y / height;\n             const amplitude = Math.sin(Math.PI * norm) * maxAmplitude;\n-            const d = Array.from({ length: 6 }, (_, seg) => {\n-              const x0 = (seg * 100) / 5;\n-              const x1 = ((seg + 1) * 100) / 5;\n+            const d = Array.from({ length: 4 }, (_, seg) => {\n+              // Reduced segments\n+              const x0 = (seg * 100) / 3;\n+              const x1 = ((seg + 1) * 100) / 3;\n               const cpX = (x0 + x1) / 2;\n               const cpY = y + (seg % 2 === 0 ? amplitude : -amplitude);\n               return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x1} ${y}`;\n             }).join(' ');\n@@ -52,5 +52,5 @@\n     </div>\n   );\n };\n \n-export default WavyBackground;\n+export default WavyBackground;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747085044410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,29 @@\n+// src/components/WavyBackground.jsx\n 'use client';\n import React from 'react';\n \n+\n const WavyBackground = ({\n   height = 400,\n-  lines = 20, // Reduced for performance\n+  lines = 30,\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-  strokeColor = 'none', // New prop\n-  strokeWidth = 0.7, // New prop\n+  // this must match a real Tailwind class:\n   borderRadiusClass = 'rounded-3xl',\n }) => {\n   const yPositions = Array.from({ length: lines }, (_, i) =>\n     (i * height) / (lines - 1)\n   );\n \n   return (\n     <div\n-      className={`absolute inset-0 w-full overflow-hidden px-4 sm:px-8 lg:px-14 ${borderRadiusClass}`}\n+      className={`absolute inset-0 w-full overflow-hidden px-14 ${borderRadiusClass}`}\n       style={{ height, zIndex: -1 }}\n     >\n       <svg\n-        className=\"w-full h-full\"\n+        className=\"w-full h-full \"\n         viewBox={`0 0 100 ${height}`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n@@ -32,16 +33,15 @@\n             <stop offset=\"100%\" stopColor={gradientTo} />\n           </linearGradient>\n         </defs>\n         <rect width=\"100%\" height=\"100%\" fill=\"url(#bgGrad)\" />\n-        <g stroke={strokeColor} strokeWidth={strokeWidth} fill=\"none\">\n+        <g stroke=\"black\" strokeWidth=\"0.7\" fill=\"none\">\n           {yPositions.map((y, idx) => {\n             const norm = y / height;\n             const amplitude = Math.sin(Math.PI * norm) * maxAmplitude;\n-            const d = Array.from({ length: 4 }, (_, seg) => {\n-              // Reduced segments\n-              const x0 = (seg * 100) / 3;\n-              const x1 = ((seg + 1) * 100) / 3;\n+            const d = Array.from({ length: 6 }, (_, seg) => {\n+              const x0 = (seg * 100) / 5;\n+              const x1 = ((seg + 1) * 100) / 5;\n               const cpX = (x0 + x1) / 2;\n               const cpY = y + (seg % 2 === 0 ? amplitude : -amplitude);\n               return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x1} ${y}`;\n             }).join(' ');\n@@ -52,5 +52,5 @@\n     </div>\n   );\n };\n \n-export default WavyBackground;\n\\ No newline at end of file\n+export default WavyBackground;\n"
                },
                {
                    "date": 1747085215408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,43 @@\n-// src/components/WavyBackground.jsx\n 'use client';\n import React from 'react';\n \n+interface WavyBackgroundProps {\n+  /** Total height of the SVG container in pixels */\n+  height?: number;\n+  /** How many horizontal wave lines to draw */\n+  lines?: number;\n+  /** Maximum vertical displacement of the waves */\n+  maxAmplitude?: number;\n+  /** Start color of the vertical gradient */\n+  gradientFrom?: string;\n+  /** End color of the vertical gradient */\n+  gradientTo?: string;\n+  /** Tailwind class for rounding the container */\n+  borderRadiusClass?: string;\n+}\n \n-const WavyBackground = ({\n+const WavyBackground: React.FC<WavyBackgroundProps> = ({\n   height = 400,\n   lines = 30,\n   maxAmplitude = 20,\n   gradientFrom = '#334d6e',\n   gradientTo = '#7fb1d2',\n-  // this must match a real Tailwind class:\n   borderRadiusClass = 'rounded-3xl',\n }) => {\n-  const yPositions = Array.from({ length: lines }, (_, i) =>\n-    (i * height) / (lines - 1)\n+  // Precompute the y coordinate of each line\n+  const yPositions = React.useMemo(\n+    () => Array.from({ length: lines }, (_, i) => (i * height) / (lines - 1)),\n+    [height, lines]\n   );\n \n   return (\n     <div\n       className={`absolute inset-0 w-full overflow-hidden px-14 ${borderRadiusClass}`}\n       style={{ height, zIndex: -1 }}\n     >\n       <svg\n-        className=\"w-full h-full \"\n+        className=\"w-full h-full\"\n         viewBox={`0 0 100 ${height}`}\n         preserveAspectRatio=\"none\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n       >\n@@ -32,20 +46,28 @@\n             <stop offset=\"0%\" stopColor={gradientFrom} />\n             <stop offset=\"100%\" stopColor={gradientTo} />\n           </linearGradient>\n         </defs>\n+\n+        {/* Background rectangle filled with the gradient */}\n         <rect width=\"100%\" height=\"100%\" fill=\"url(#bgGrad)\" />\n-        <g stroke=\"black\" strokeWidth=\"0.7\" fill=\"none\">\n+\n+        {/* Wavy lines */}\n+        <g stroke=\"black\" strokeWidth={0.7} fill=\"none\">\n           {yPositions.map((y, idx) => {\n             const norm = y / height;\n             const amplitude = Math.sin(Math.PI * norm) * maxAmplitude;\n-            const d = Array.from({ length: 6 }, (_, seg) => {\n-              const x0 = (seg * 100) / 5;\n-              const x1 = ((seg + 1) * 100) / 5;\n+\n+            // Build a 6-segment wave path for this line\n+            const segments = 6;\n+            const d = Array.from({ length: segments }, (_, seg) => {\n+              const x0 = (seg * 100) / segments;\n+              const x1 = ((seg + 1) * 100) / segments;\n               const cpX = (x0 + x1) / 2;\n               const cpY = y + (seg % 2 === 0 ? amplitude : -amplitude);\n               return `C ${cpX} ${cpY} ${cpX} ${cpY} ${x1} ${y}`;\n             }).join(' ');\n+\n             return <path key={idx} d={`M0 ${y} ${d}`} />;\n           })}\n         </g>\n       </svg>\n"
                }
            ],
            "date": 1747076817878,
            "name": "Commit-0",
            "content": "// WavyBackground.tsx\n'use client';\nimport React from 'react';\n\ninterface WavyBackgroundProps {\n  height?: number;        // px\n  lines?: number;         // how many curves to draw\n  amplitude?: number;     // how “tall” each wave is\n  gradientFrom?: string;  // top color\n  gradientTo?: string;    // bottom color\n}\n\nconst WavyBackground: React.FC<WavyBackgroundProps> = ({\n  height = 400,\n  lines = 30,\n  amplitude = 20,\n  gradientFrom = '#334d6e',\n  gradientTo = '#7fb1d2',\n}) => {\n  // Generate an array of Y‐positions for each path\n  const yPositions = Array.from({ length: lines }, (_, i) =>\n    (i * height) / (lines - 1)\n  );\n\n  return (\n    <div className=\"relative w-full overflow-hidden\" style={{ height }}>\n      <svg\n        className=\"absolute inset-0 w-full h-full\"\n        viewBox={`0 0 100 ${height}`}\n        preserveAspectRatio=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        {/* 1) Blue gradient background */}\n        <defs>\n          <linearGradient id=\"bgGrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={gradientFrom} />\n            <stop offset=\"100%\" stopColor={gradientTo} />\n          </linearGradient>\n        </defs>\n        <rect width=\"100%\" height=\"100%\" fill=\"url(#bgGrad)\" />\n\n        {/* 2) Wavy lines */}\n        <g stroke=\"black\" strokeWidth=\"0.5\" fill=\"none\">\n          {yPositions.map((y, idx) => {\n            // Build a smooth sine‐like wave across the width\n            const wavePath = Array.from({ length: 6 }, (_, segment) => {\n              const x0 = (segment * 100) / 5;\n              const x1 = ((segment + 1) * 100) / 5;\n              const cpX = x0 + (x1 - x0) / 2;\n              // Alternate control‐point offsets up and down\n              const cpY =\n                y +\n                (segment % 2 === 0 ? amplitude : -amplitude);\n              return `C ${cpX} ${cpY}, ${cpX} ${cpY}, ${x1} ${y}`;\n            }).join(' ');\n\n            return (\n              <path\n                key={idx}\n                d={`M 0 ${y} ${wavePath}`}\n              />\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default WavyBackground;\n"
        }
    ]
}