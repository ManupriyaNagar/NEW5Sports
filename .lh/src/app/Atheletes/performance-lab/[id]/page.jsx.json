{
    "sourceFile": "src/app/atheletes/performance-lab/[id]/page.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1747546404163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747546591781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+import React from 'react';\n+import { notFound } from 'next/navigation';\n+import Head from 'next/head';\n+import performanceLabData from '@/lib/performance-lab.json';\n+import PerformanceLabDetailClient from '@/components/Atheletes/PerformanceLabDetailClient';\n+\n+\n+\n+export function generateStaticParams() {\n+  if (!performanceLabData || !Array.isArray(performanceLabData)) {\n+    console.error('performanceLabData is invalid or empty:', performanceLabData);\n+    return [];\n+  }\n+\n+  const params = performanceLabData\n+    .filter((service) => {\n+      if (!service.id || typeof service.id !== 'string') {\n+        console.error('Invalid or missing id for service:', service);\n+        return false;\n+      }\n+      return true;\n+    })\n+    .map((service) => ({ id: service.id }));\n+\n+  if (params.length === 0) {\n+    console.warn('No valid IDs found in performanceLabData');\n+  }\n+\n+  return params;\n+}\n+\n+export const dynamicParams = false;\n+\n+export default async function PerformanceLabDetailPage({ params }) {\n+  const id = await params.id; // Await params.id\n+  const service = performanceLabData.find((s) => s.id === id);\n+  if (!service) return notFound();\n+\n+  return (\n+    <>\n+      <Head>\n+        <title>{service.title} - Performance Lab</title>\n+        <meta name=\"description\" content={service.description} />\n+      </Head>\n+      <PerformanceLabDetailClient service={service} />\n+    </>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747546722418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+'use client';\n+\n+import React from 'react';\n+import { motion } from 'framer-motion';\n+import Link from 'next/link';\n+import Image from 'next/image';\n+import { Space_Grotesk } from 'next/font/google';\n+import performanceLabData from '@/lib/performance-lab.json';\n+\n+// Font setup\n+const spaceGrotesk = Space_Grotesk({\n+  subsets: ['latin'],\n+  variable: '--font-space-grotesk',\n+  weight: ['300', '400', '500', '600', '700'],\n+});\n+\n+// Animation variants\n+const containerVariants = {\n+  hidden: { opacity: 0, y: 50 },\n+  visible: {\n+    opacity: 1,\n+    y: 0,\n+    transition: { duration: 0.6, staggerChildren: 0.2 },\n+  },\n+};\n+\n+const itemVariants = {\n+  hidden: { opacity: 0, y: 20 },\n+  visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },\n+};\n+\n+// Service Card Component\n+function ServiceCard({ id, title, description, image, reverse }) {\n+  return (\n+    <motion.div\n+      variants={itemVariants}\n+      className={`\n+        p-6 sm:p-8 flex flex-col\n+        ${reverse ? 'md:flex-row-reverse' : 'md:flex-row'}\n+        items-center\n+      `}\n+    >\n+      <div className=\"md:w-1/2 p-4 sm:p-6\">\n+        <h3 className=\"text-2xl sm:text-5xl font-bold uppercase bg-clip-text text-transparent bg-gradient-to-r from-green-600 to-green-400\">\n+          {title}\n+        </h3>\n+        <p className=\"mt-4 text-base sm:text-xl font-medium text-gray-100\">\n+          {description}\n+        </p>\n+        <Link\n+          href={`/atheletes/performance-lab/${id}`}\n+          className=\"mt-6 inline-block px-6 py-2 text-lime-400 rounded-full transition hover:bg-green-500\"\n+        >\n+          Learn More\n+        </Link>\n+      </div>\n+      <div className=\"md:w-1/2 relative h-64 sm:h-80\">\n+        <Image\n+          src={image}\n+          alt={title}\n+          fill\n+          className=\"object-cover rounded-lg\"\n+          sizes=\"(max-width: 768px) 100vw, 50vw\"\n+        />\n+      </div>\n+    </motion.div>\n+  );\n+}\n+\n+export default function PerformanceLabPage() {\n+  return (\n+    <div className={`min-h-screen ${spaceGrotesk.variable}`}>\n+      <section className=\"relative py-16 bg-black\">\n+        <motion.div\n+          variants={containerVariants}\n+          initial=\"hidden\"\n+          whileInView=\"visible\"\n+          viewport={{ once: true }}\n+          className=\"container mx-auto\"\n+        >\n+          {/* “Performance Lab” Header with half-circle notches */}\n+          <section className=\"flex w-full text-black max-md:flex-col mb-8\">\n+            <article className=\"relative flex flex-col w-full bg-lime-400 border border-white rounded-[32px] overflow-visible py-10\">\n+              <div className=\"absolute top-1/2 w-[30px] h-[60px] bg-black rounded-r-full transform -translate-y-1/2 left-0\" />\n+              <div className=\"absolute top-1/2 w-[30px] h-[60px] bg-black rounded-l-full transform -translate-y-1/2 right-0\" />\n+              <h2 className=\"self-center text-6xl font-bold max-md:text-4xl\">\n+                Performance Lab\n+              </h2>\n+              <p className=\"mt-5 text-2xl text-center max-w-3xl mx-auto\">\n+                Our state-of-the-art Performance Lab offers advanced testing and\n+                analysis to optimize your physical performance and health.\n+              </p>\n+            </article>\n+          </section>\n+\n+          {/* Services Grid */}\n+          <div className=\"grid gap-8 sm:gap-10\">\n+            <div className=\"rounded-b-xl overflow-hidden border border-t-0 border-blue-400 -mt-5 p-1\">\n+              {performanceLabData.map((svc, idx) => (\n+                <ServiceCard\n+                  key={svc.id}\n+                  id={svc.id}\n+                  title={svc.title}\n+                  description={svc.description}\n+                  image={svc.image}\n+                  reverse={idx % 2 !== 0}\n+                />\n+              ))}\n+            </div>\n+          </div>\n+        </motion.div>\n+      </section>\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747546767696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import { notFound } from 'next/navigation';\n+import { Metadata } from 'next';\n+import performanceLabData from '@/lib/performance-lab.json';\n+import PerformanceLabDetailClient from '@/components/Atheletes/PerformanceLabDetailClient';\n+\n+// Define Service interface for type safety\n+const Service = {\n+  id: String,\n+  title: String,\n+  description: String,\n+  image: String,\n+  buttonText: String,\n+  buttonLink: String,\n+  consultations: Array,\n+};\n+\n+// Generate static parameters\n+export function generateStaticParams() {\n+  return performanceLabData.map((p) => ({ id: p.id }));\n+}\n+\n+// Generate metadata for SEO\n+export async function generateMetadata({ params }) {\n+  const service = performanceLabData.find((p) => p.id === params.id);\n+\n+  if (!service) {\n+    return {\n+      title: 'Service Not Found',\n+      description: 'The requested performance lab service could not be found.',\n+    };\n+  }\n+\n+  return {\n+    title: `${service.title} - Performance Lab`,\n+    description: service.description,\n+  };\n+}\n+\n+export const dynamicParams = false;\n+\n+export default function PerformanceLabDetailPage({ params }) {\n+  const service = performanceLabData.find((p) => p.id === params.id);\n+  if (!service) return notFound();\n+\n+  return <PerformanceLabDetailClient service={service} />;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747546968679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import { notFound } from 'next/navigation';\n+import { Metadata } from 'next';\n+import performanceLabData from '@/lib/performance-lab.json';\n+import PerformanceLabDetailClient from '@/components/Atheletes/PerformanceLabDetailClient';\n+\n+// Define Service interface for type safety\n+const Service = {\n+  id: String,\n+  title: String,\n+  description: String,\n+  image: String,\n+  buttonText: String,\n+  buttonLink: String,\n+  consultations: Array,\n+};\n+\n+// Generate static parameters\n+export function generateStaticParams() {\n+  return performanceLabData.map((p) => ({ id: p.id }));\n+}\n+\n+// Generate metadata for SEO\n+export async function generateMetadata({ params }) {\n+  const service = performanceLabData.find((p) => p.id === params.id);\n+\n+  if (!service) {\n+    return {\n+      title: 'Service Not Found',\n+      description: 'The requested performance lab service could not be found.',\n+    };\n+  }\n+\n+  return {\n+    title: `${service.title} - Performance Lab`,\n+    description: service.description,\n+  };\n+}\n+\n+export const dynamicParams = false;\n+\n+export default function PerformanceLabDetailPage({ params }) {\n+  const service = performanceLabData.find((p) => p.id === params.id);\n+  if (!service) return notFound();\n+\n+  return <PerformanceLabDetailClient service={service} />;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747547260820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { notFound } from 'next/navigation';\n import { Metadata } from 'next';\n-import performanceLabData from '@/lib/performance-lab.json';\n+import performanceLabData from '@/lib/';\n import PerformanceLabDetailClient from '@/components/Atheletes/PerformanceLabDetailClient';\n \n // Define Service interface for type safety\n const Service = {\n@@ -42,309 +42,5 @@\n   const service = performanceLabData.find((p) => p.id === params.id);\n   if (!service) return notFound();\n \n   return <PerformanceLabDetailClient service={service} />;\n-}\n-import { notFound } from 'next/navigation';\n-import { Metadata } from 'next';\n-import performanceLabData from '@/lib/performance-lab.json';\n-import PerformanceLabDetailClient from '@/components/Atheletes/PerformanceLabDetailClient';\n-\n-// Define Service interface for type safety\n-const Service = {\n-  id: String,\n-  title: String,\n-  description: String,\n-  image: String,\n-  buttonText: String,\n-  buttonLink: String,\n-  consultations: Array,\n-};\n-\n-// Generate static parameters\n-export function generateStaticParams() {\n-  return performanceLabData.map((p) => ({ id: p.id }));\n-}\n-\n-// Generate metadata for SEO\n-export async function generateMetadata({ params }) {\n-  const service = performanceLabData.find((p) => p.id === params.id);\n-\n-  if (!service) {\n-    return {\n-      title: 'Service Not Found',\n-      description: 'The requested performance lab service could not be found.',\n-    };\n-  }\n-\n-  return {\n-    title: `${service.title} - Performance Lab`,\n-    description: service.description,\n-  };\n-}\n-\n-export const dynamicParams = false;\n-\n-export default function PerformanceLabDetailPage({ params }) {\n-  const service = performanceLabData.find((p) => p.id === params.id);\n-  if (!service) return notFound();\n-\n-  return <PerformanceLabDetailClient service={service} />;\n-}\n-'use client';\n-\n-import React from 'react';\n-import { motion } from 'framer-motion';\n-import Link from 'next/link';\n-import Image from 'next/image';\n-import { Space_Grotesk } from 'next/font/google';\n-import performanceLabData from '@/lib/performance-lab.json';\n-\n-// Font setup\n-const spaceGrotesk = Space_Grotesk({\n-  subsets: ['latin'],\n-  variable: '--font-space-grotesk',\n-  weight: ['300', '400', '500', '600', '700'],\n-});\n-\n-// Animation variants\n-const containerVariants = {\n-  hidden: { opacity: 0, y: 50 },\n-  visible: {\n-    opacity: 1,\n-    y: 0,\n-    transition: { duration: 0.6, staggerChildren: 0.2 },\n-  },\n-};\n-\n-const itemVariants = {\n-  hidden: { opacity: 0, y: 20 },\n-  visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },\n-};\n-\n-// Service Card Component\n-function ServiceCard({ id, title, description, image, reverse }) {\n-  return (\n-    <motion.div\n-      variants={itemVariants}\n-      className={`\n-        p-6 sm:p-8 flex flex-col\n-        ${reverse ? 'md:flex-row-reverse' : 'md:flex-row'}\n-        items-center\n-      `}\n-    >\n-      <div className=\"md:w-1/2 p-4 sm:p-6\">\n-        <h3 className=\"text-2xl sm:text-5xl font-bold uppercase bg-clip-text text-transparent bg-gradient-to-r from-green-600 to-green-400\">\n-          {title}\n-        </h3>\n-        <p className=\"mt-4 text-base sm:text-xl font-medium text-gray-100\">\n-          {description}\n-        </p>\n-        <Link\n-          href={`/atheletes/performance-lab/${id}`}\n-          className=\"mt-6 inline-block px-6 py-2 text-lime-400 rounded-full transition hover:bg-green-500\"\n-        >\n-          Learn More\n-        </Link>\n-      </div>\n-      <div className=\"md:w-1/2 relative h-64 sm:h-80\">\n-        <Image\n-          src={image}\n-          alt={title}\n-          fill\n-          className=\"object-cover rounded-lg\"\n-          sizes=\"(max-width: 768px) 100vw, 50vw\"\n-        />\n-      </div>\n-    </motion.div>\n-  );\n-}\n-\n-export default function PerformanceLabPage() {\n-  return (\n-    <div className={`min-h-screen ${spaceGrotesk.variable}`}>\n-      <section className=\"relative py-16 bg-black\">\n-        <motion.div\n-          variants={containerVariants}\n-          initial=\"hidden\"\n-          whileInView=\"visible\"\n-          viewport={{ once: true }}\n-          className=\"container mx-auto\"\n-        >\n-          {/* “Performance Lab” Header with half-circle notches */}\n-          <section className=\"flex w-full text-black max-md:flex-col mb-8\">\n-            <article className=\"relative flex flex-col w-full bg-lime-400 border border-white rounded-[32px] overflow-visible py-10\">\n-              <div className=\"absolute top-1/2 w-[30px] h-[60px] bg-black rounded-r-full transform -translate-y-1/2 left-0\" />\n-              <div className=\"absolute top-1/2 w-[30px] h-[60px] bg-black rounded-l-full transform -translate-y-1/2 right-0\" />\n-              <h2 className=\"self-center text-6xl font-bold max-md:text-4xl\">\n-                Performance Lab\n-              </h2>\n-              <p className=\"mt-5 text-2xl text-center max-w-3xl mx-auto\">\n-                Our state-of-the-art Performance Lab offers advanced testing and\n-                analysis to optimize your physical performance and health.\n-              </p>\n-            </article>\n-          </section>\n-\n-          {/* Services Grid */}\n-          <div className=\"grid gap-8 sm:gap-10\">\n-            <div className=\"rounded-b-xl overflow-hidden border border-t-0 border-blue-400 -mt-5 p-1\">\n-              {performanceLabData.map((svc, idx) => (\n-                <ServiceCard\n-                  key={svc.id}\n-                  id={svc.id}\n-                  title={svc.title}\n-                  description={svc.description}\n-                  image={svc.image}\n-                  reverse={idx % 2 !== 0}\n-                />\n-              ))}\n-            </div>\n-          </div>\n-        </motion.div>\n-      </section>\n-    </div>\n-  );\n-}\n-import React from 'react';\n-import { notFound } from 'next/navigation';\n-import Head from 'next/head';\n-import performanceLabData from '@/lib/performance-lab.json';\n-import PerformanceLabDetailClient from '@/components/Atheletes/PerformanceLabDetailClient';\n-\n-\n-\n-export function generateStaticParams() {\n-  if (!performanceLabData || !Array.isArray(performanceLabData)) {\n-    console.error('performanceLabData is invalid or empty:', performanceLabData);\n-    return [];\n-  }\n-\n-  const params = performanceLabData\n-    .filter((service) => {\n-      if (!service.id || typeof service.id !== 'string') {\n-        console.error('Invalid or missing id for service:', service);\n-        return false;\n-      }\n-      return true;\n-    })\n-    .map((service) => ({ id: service.id }));\n-\n-  if (params.length === 0) {\n-    console.warn('No valid IDs found in performanceLabData');\n-  }\n-\n-  return params;\n-}\n-\n-export const dynamicParams = false;\n-\n-export default async function PerformanceLabDetailPage({ params }) {\n-  const id = await params.id; // Await params.id\n-  const service = performanceLabData.find((s) => s.id === id);\n-  if (!service) return notFound();\n-\n-  return (\n-    <>\n-      <Head>\n-        <title>{service.title} - Performance Lab</title>\n-        <meta name=\"description\" content={service.description} />\n-      </Head>\n-      <PerformanceLabDetailClient service={service} />\n-    </>\n-  );\n-}\n-import { notFound } from 'next/navigation';\n-import { Metadata } from 'next';\n-import performanceLabData from '@/lib/performance-lab.json';\n-import PerformanceLabDetailClient from '@/components/Atheletes/PerformanceLabDetailClient';\n-\n-// Define the Service interface for type safety\n-interface Service {\n-  id: string;\n-  title: string;\n-  description: string;\n-  image: string;\n-  consultations?: Array<{\n-    id: string;\n-    title: string;\n-    consultations: Array<{\n-      id: string;\n-      title?: string;\n-      pageTitle?: string;\n-      intro?: string;\n-      description?: string;\n-      price?: string;\n-      details?: string;\n-      features?: string[];\n-      idealFor?: string;\n-    }>;\n-  }>;\n-  detailedContent: {\n-    overview: string;\n-    price?: string;\n-    duration?: string;\n-    protocol?: string[];\n-    dataObtained?: string[] | Record<string, string[]>;\n-    idealFor?: string;\n-    quote?: { text: string; author: string };\n-    services?: Array<{\n-      name: string;\n-      description?: string;\n-      price?: string;\n-      duration?: string;\n-      validity?: string;\n-      details?: string[];\n-      protocol?: string[];\n-      tests?: string[];\n-      dataObtained?: string[] | Record<string, string[]>;\n-      idealFor?: string;\n-      report?: string;\n-    }>;\n-    booking?: boolean;\n-  };\n-}\n-\n-// Generate static parameters for static site generation\n-export function generateStaticParams() {\n-  if (!performanceLabData || !Array.isArray(performanceLabData)) {\n-    return [];\n-  }\n-\n-  return performanceLabData\n-    .filter((service: Service) => service.id && typeof service.id === 'string')\n-    .map((service: Service) => ({ id: service.id }));\n-}\n-\n-// Generate metadata for SEO\n-export async function generateMetadata({ params }: { params: { id: string } }): Promise<Metadata> {\n-  const service = performanceLabData.find((s: Service) => s.id === params.id);\n-\n-  if (!service) {\n-    return {\n-      title: 'Service Not Found',\n-      description: 'The requested performance lab service could not be found.',\n-    };\n-  }\n-\n-  return {\n-    title: `${service.title} - Performance Lab`,\n-    description: service.description,\n-  };\n-}\n-\n-export const dynamicParams = false;\n-\n-interface PerformanceLabDetailPageProps {\n-  params: Promise<{ id: string }>;\n-}\n-\n-export default async function PerformanceLabDetailPage({ params }: PerformanceLabDetailPageProps) {\n-  const { id } = await params;\n-  const service = performanceLabData.find((s: Service) => s.id === id);\n-\n-  if (!service) {\n-    notFound();\n-  }\n-\n-  return <PerformanceLabDetailClient service={service} />;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747548290188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { notFound } from 'next/navigation';\n import { Metadata } from 'next';\n-import performanceLabData from '@/lib/';\n+import performanceLabData from './../../../../lib/performance-lab.json';\n import PerformanceLabDetailClient from '@/components/Atheletes/PerformanceLabDetailClient';\n \n // Define Service interface for type safety\n const Service = {\n"
                },
                {
                    "date": 1747548307149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { notFound } from 'next/navigation';\n import { Metadata } from 'next';\n import performanceLabData from './../../../../lib/performance-lab.json';\n-import PerformanceLabDetailClient from '@/components/Atheletes/PerformanceLabDetailClient';\n+import PerformanceLabDetailClient from './../../../../components/Atheletes/PerformanceLabDetailClient';\n \n // Define Service interface for type safety\n const Service = {\n   id: String,\n"
                }
            ],
            "date": 1747546404163,
            "name": "Commit-0",
            "content": "import { notFound } from 'next/navigation';\nimport { Metadata } from 'next';\nimport performanceLabData from '@/lib/performance-lab.json';\nimport PerformanceLabDetailClient from '@/components/Atheletes/PerformanceLabDetailClient';\n\n// Define the Service interface for type safety\ninterface Service {\n  id: string;\n  title: string;\n  description: string;\n  image: string;\n  consultations?: Array<{\n    id: string;\n    title: string;\n    consultations: Array<{\n      id: string;\n      title?: string;\n      pageTitle?: string;\n      intro?: string;\n      description?: string;\n      price?: string;\n      details?: string;\n      features?: string[];\n      idealFor?: string;\n    }>;\n  }>;\n  detailedContent: {\n    overview: string;\n    price?: string;\n    duration?: string;\n    protocol?: string[];\n    dataObtained?: string[] | Record<string, string[]>;\n    idealFor?: string;\n    quote?: { text: string; author: string };\n    services?: Array<{\n      name: string;\n      description?: string;\n      price?: string;\n      duration?: string;\n      validity?: string;\n      details?: string[];\n      protocol?: string[];\n      tests?: string[];\n      dataObtained?: string[] | Record<string, string[]>;\n      idealFor?: string;\n      report?: string;\n    }>;\n    booking?: boolean;\n  };\n}\n\n// Generate static parameters for static site generation\nexport function generateStaticParams() {\n  if (!performanceLabData || !Array.isArray(performanceLabData)) {\n    return [];\n  }\n\n  return performanceLabData\n    .filter((service: Service) => service.id && typeof service.id === 'string')\n    .map((service: Service) => ({ id: service.id }));\n}\n\n// Generate metadata for SEO\nexport async function generateMetadata({ params }: { params: { id: string } }): Promise<Metadata> {\n  const service = performanceLabData.find((s: Service) => s.id === params.id);\n\n  if (!service) {\n    return {\n      title: 'Service Not Found',\n      description: 'The requested performance lab service could not be found.',\n    };\n  }\n\n  return {\n    title: `${service.title} - Performance Lab`,\n    description: service.description,\n  };\n}\n\nexport const dynamicParams = false;\n\ninterface PerformanceLabDetailPageProps {\n  params: Promise<{ id: string }>;\n}\n\nexport default async function PerformanceLabDetailPage({ params }: PerformanceLabDetailPageProps) {\n  const { id } = await params;\n  const service = performanceLabData.find((s: Service) => s.id === id);\n\n  if (!service) {\n    notFound();\n  }\n\n  return <PerformanceLabDetailClient service={service} />;\n}"
        }
    ]
}